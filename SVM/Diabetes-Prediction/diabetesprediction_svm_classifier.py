# -*- coding: utf-8 -*-
"""DiabetesPrediction_SVM_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ifpiNaOltdjSw0xowKgt7II7CANECeVb

Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#load data
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

"""DATA ANALYSIS"""

diabetes_dataset.head()

"""

1.  0-->non - diabetic
2.   1-->diabetic

"""

#number of row and cols
diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

sns.countplot(x='Outcome', data=diabetes_dataset)

diabetes_dataset.groupby('Outcome').mean()

#separate variables
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

#standerize the data
scaler = StandardScaler()

scaler.fit(X)
standarized_data = scaler.transform(X)

print(standarized_data)

X = standarized_data
Y = diabetes_dataset['Outcome']

"""TRAIN-TEST SPLIT"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

"""TRAINING THE MODEL"""

from sklearn.svm import SVC # Import the SVC class
svm = SVC(kernel = 'linear')
svm.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy score for training data
X_train_prediction = svm.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score for test data
X_test_prediction = svm.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', testing_data_accuracy)

"""Check for Random Forest Classifier"""

#random forest classifier
# from sklearn.ensemble import RandomForestClassifier
# rf = RandomForestClassifier(n_estimators=100)
# rf.fit(X_train, Y_train)

#accuracy score fot training dataset
# X_train_prediction = rf.predict(X_train)
# training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

# print('Accuracy score of the training data : ', training_data_accuracy)

#for test dataset
# X_test_prediction = rf.predict(X_test)
# testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

# print('Accuracy score of the test data : ', testing_data_accuracy)

"""CONCLUSION:

SVM works better than random forest in this case so we will select SVM classifier has our
model
"""

#MAKING A PREDICTIVE SYSTEM................

input_data = (4,110,92,0,0,37.6,0.191,30)

#changing input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshape the data
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standarize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = svm.predict(std_data)
# print(prediction)

if(prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')